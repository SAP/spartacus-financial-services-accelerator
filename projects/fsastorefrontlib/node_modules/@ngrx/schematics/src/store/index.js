(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@ngrx/schematics/src/store/index", ["require", "exports", "@angular-devkit/schematics", "@angular-devkit/core", "typescript", "@ngrx/schematics/schematics-core"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const schematics_1 = require("@angular-devkit/schematics");
    const core_1 = require("@angular-devkit/core");
    const ts = require("typescript");
    const schematics_core_1 = require("@ngrx/schematics/schematics-core");
    function addImportToNgModule(options) {
        return (host) => {
            const modulePath = options.module;
            if (!modulePath) {
                return host;
            }
            if (!host.exists(modulePath)) {
                throw new Error(`Specified module path ${modulePath} does not exist`);
            }
            const text = host.read(modulePath);
            if (text === null) {
                throw new schematics_1.SchematicsException(`File ${modulePath} does not exist.`);
            }
            const sourceText = text.toString('utf-8');
            const source = ts.createSourceFile(modulePath, sourceText, ts.ScriptTarget.Latest, true);
            const statePath = `${options.path}/${options.statePath}`;
            const relativePath = schematics_core_1.buildRelativePath(modulePath, statePath);
            const environmentsPath = schematics_core_1.buildRelativePath(statePath, `${options.path}/environments/environment`);
            const runtimeChecks = `
      runtimeChecks: {
        strictStateImmutability: true,
        strictActionImmutability: true,
      }
   `;
            const rootStoreReducers = options.minimal ? `{}` : `reducers`;
            const rootStoreConfig = options.minimal
                ? `{ ${runtimeChecks} }`
                : `{
      metaReducers, ${runtimeChecks} }`;
            const storeNgModuleImport = schematics_core_1.addImportToModule(source, modulePath, options.root
                ? `StoreModule.forRoot(${rootStoreReducers}, ${rootStoreConfig})`
                : `StoreModule.forFeature(from${schematics_core_1.stringUtils.classify(options.name)}.${schematics_core_1.stringUtils.camelize(options.name)}FeatureKey, from${schematics_core_1.stringUtils.classify(options.name)}.reducers, { metaReducers: from${schematics_core_1.stringUtils.classify(options.name)}.metaReducers })`, relativePath).shift();
            let commonImports = [
                schematics_core_1.insertImport(source, modulePath, 'StoreModule', '@ngrx/store'),
                storeNgModuleImport,
            ];
            if (options.root && !options.minimal) {
                commonImports = commonImports.concat([
                    schematics_core_1.insertImport(source, modulePath, 'reducers, metaReducers', relativePath),
                ]);
            }
            else if (!options.root) {
                commonImports = commonImports.concat([
                    schematics_core_1.insertImport(source, modulePath, `* as from${schematics_core_1.stringUtils.classify(options.name)}`, relativePath, true),
                ]);
            }
            let rootImports = [];
            if (options.root) {
                const storeDevtoolsNgModuleImport = schematics_core_1.addImportToModule(source, modulePath, `!environment.production ? StoreDevtoolsModule.instrument() : []`, relativePath).shift();
                rootImports = rootImports.concat([
                    schematics_core_1.insertImport(source, modulePath, 'StoreDevtoolsModule', '@ngrx/store-devtools'),
                    schematics_core_1.insertImport(source, modulePath, 'environment', environmentsPath),
                    storeDevtoolsNgModuleImport,
                ]);
            }
            const changes = [...commonImports, ...rootImports];
            const recorder = host.beginUpdate(modulePath);
            for (const change of changes) {
                if (change instanceof schematics_core_1.InsertChange) {
                    recorder.insertLeft(change.pos, change.toAdd);
                }
            }
            host.commitUpdate(recorder);
            return host;
        };
    }
    function default_1(options) {
        return (host, context) => {
            if (!options.name && !options.root) {
                throw new Error(`Please provide a name for the feature state`);
            }
            options.path = schematics_core_1.getProjectPath(host, options);
            const parsedPath = schematics_core_1.parseName(options.path, options.name || '');
            options.name = parsedPath.name;
            options.path = parsedPath.path;
            const statePath = `/${options.path}/${options.statePath}/index.ts`;
            const srcPath = core_1.dirname(options.path);
            const environmentsPath = schematics_core_1.buildRelativePath(statePath, `${srcPath}/environments/environment`);
            if (options.module) {
                options.module = schematics_core_1.findModuleFromOptions(host, options);
            }
            if (options.root &&
                options.stateInterface &&
                options.stateInterface !== 'State') {
                options.stateInterface = schematics_core_1.stringUtils.classify(options.stateInterface);
            }
            const templateSource = schematics_1.apply(schematics_1.url('./files'), [
                options.root && options.minimal ? schematics_1.filter(_ => false) : schematics_1.noop(),
                schematics_1.applyTemplates(Object.assign({}, schematics_core_1.stringUtils, options, { isLib: schematics_core_1.isLib(host, options), environmentsPath })),
                schematics_1.move(parsedPath.path),
            ]);
            return schematics_1.chain([
                schematics_1.branchAndMerge(schematics_1.chain([addImportToNgModule(options), schematics_1.mergeWith(templateSource)])),
            ])(host, context);
        };
    }
    exports.default = default_1;
});
//# sourceMappingURL=data:application/json;base64,

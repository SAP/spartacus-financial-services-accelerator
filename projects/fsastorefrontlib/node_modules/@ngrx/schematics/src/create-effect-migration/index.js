(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@ngrx/schematics/src/create-effect-migration/index", ["require", "exports", "typescript", "@angular-devkit/schematics", "@ngrx/schematics/schematics-core"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const ts = require("typescript");
    const schematics_1 = require("@angular-devkit/schematics");
    const schematics_core_1 = require("@ngrx/schematics/schematics-core");
    function migrateToCreators() {
        return (host) => host.visit(path => {
            if (!path.endsWith('.ts')) {
                return;
            }
            const sourceFile = ts.createSourceFile(path, host.read(path).toString(), ts.ScriptTarget.Latest);
            if (sourceFile.isDeclarationFile) {
                return;
            }
            const effectsPerClass = sourceFile.statements
                .filter(ts.isClassDeclaration)
                .map(clas => clas.members
                .filter(ts.isPropertyDeclaration)
                .filter(property => property.decorators &&
                property.decorators.some(isEffectDecorator)));
            const effects = effectsPerClass.reduce((acc, effects) => acc.concat(effects), []);
            const createEffectsChanges = replaceEffectDecorators(host, path, effects);
            const importChanges = schematics_core_1.replaceImport(sourceFile, path, '@ngrx/effects', 'Effect', 'createEffect');
            return schematics_core_1.commitChanges(host, sourceFile.fileName, [
                ...importChanges,
                ...createEffectsChanges,
            ]);
        });
    }
    exports.migrateToCreators = migrateToCreators;
    function replaceEffectDecorators(host, path, effects) {
        const inserts = effects
            .filter(effect => !!effect.initializer)
            .map(effect => {
            const decorator = (effect.decorators || []).find(isEffectDecorator);
            const effectArguments = getDispatchProperties(host, path, decorator);
            const end = effectArguments ? `, ${effectArguments})` : ')';
            return [
                new schematics_core_1.InsertChange(path, effect.initializer.pos, ' createEffect(() =>'),
                new schematics_core_1.InsertChange(path, effect.initializer.end, end),
            ];
        })
            .reduce((acc, inserts) => acc.concat(inserts), []);
        const removes = effects
            .map(effect => effect.decorators)
            .filter(decorators => decorators)
            .map(decorators => {
            const effectDecorators = decorators.filter(isEffectDecorator);
            return effectDecorators.map(decorator => {
                return new schematics_core_1.RemoveChange(path, decorator.expression.pos - 1, // also get the @ sign
                decorator.expression.end);
            });
        })
            .reduce((acc, removes) => acc.concat(removes), []);
        return [...inserts, ...removes];
    }
    function isEffectDecorator(decorator) {
        return (ts.isCallExpression(decorator.expression) &&
            ts.isIdentifier(decorator.expression.expression) &&
            decorator.expression.expression.text === 'Effect');
    }
    function getDispatchProperties(host, path, decorator) {
        if (!decorator.expression || !ts.isCallExpression(decorator.expression)) {
            return '';
        }
        // just copy the effect properties
        const content = host.read(path).toString('utf8');
        const args = content
            .substring(decorator.expression.arguments.pos, decorator.expression.arguments.end)
            .trim();
        return args;
    }
    function default_1() {
        return schematics_1.chain([migrateToCreators()]);
    }
    exports.default = default_1;
});
//# sourceMappingURL=data:application/json;base64,

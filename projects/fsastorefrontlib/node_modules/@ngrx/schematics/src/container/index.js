(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@ngrx/schematics/src/container/index", ["require", "exports", "@angular-devkit/schematics", "typescript", "@ngrx/schematics/schematics-core"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const schematics_1 = require("@angular-devkit/schematics");
    const ts = require("typescript");
    const schematics_core_1 = require("@ngrx/schematics/schematics-core");
    function addStateToComponent(options) {
        return (host) => {
            if (!options.state && !options.stateInterface) {
                return host;
            }
            const statePath = `/${options.path}/${options.state}`;
            if (options.state) {
                if (!host.exists(statePath)) {
                    throw new Error(`The Specified state path ${statePath} does not exist`);
                }
            }
            const componentPath = `/${options.path}/` +
                (options.flat ? '' : schematics_core_1.stringUtils.dasherize(options.name) + '/') +
                schematics_core_1.stringUtils.dasherize(options.name) +
                '.component.ts';
            const text = host.read(componentPath);
            if (text === null) {
                throw new schematics_1.SchematicsException(`File ${componentPath} does not exist.`);
            }
            const sourceText = text.toString('utf-8');
            const source = ts.createSourceFile(componentPath, sourceText, ts.ScriptTarget.Latest, true);
            const stateImportPath = schematics_core_1.buildRelativePath(componentPath, statePath);
            const storeImport = schematics_core_1.insertImport(source, componentPath, 'Store', '@ngrx/store');
            const stateImport = options.state
                ? schematics_core_1.insertImport(source, componentPath, `* as fromStore`, stateImportPath, true)
                : new schematics_core_1.NoopChange();
            const componentClass = source.statements.find(stm => stm.kind === ts.SyntaxKind.ClassDeclaration);
            const component = componentClass;
            const componentConstructor = component.members.find(member => member.kind === ts.SyntaxKind.Constructor);
            const cmpCtr = componentConstructor;
            const { pos } = cmpCtr;
            const stateType = options.state
                ? `fromStore.${options.stateInterface}`
                : 'any';
            const constructorText = cmpCtr.getText();
            const [start, end] = constructorText.split('()');
            const storeText = `private store: Store<${stateType}>`;
            const storeConstructor = [start, `(${storeText})`, end].join('');
            const constructorUpdate = new schematics_core_1.ReplaceChange(componentPath, pos, `  ${constructorText}\n\n`, `\n\n  ${storeConstructor}`);
            const changes = [storeImport, stateImport, constructorUpdate];
            const recorder = host.beginUpdate(componentPath);
            for (const change of changes) {
                if (change instanceof schematics_core_1.InsertChange) {
                    recorder.insertLeft(change.pos, change.toAdd);
                }
                else if (change instanceof schematics_core_1.ReplaceChange) {
                    recorder.remove(pos, change.oldText.length);
                    recorder.insertLeft(change.order, change.newText);
                }
            }
            host.commitUpdate(recorder);
            return host;
        };
    }
    function default_1(options) {
        return (host, context) => {
            options.path = schematics_core_1.getProjectPath(host, options);
            const parsedPath = schematics_core_1.parseName(options.path, options.name);
            options.name = parsedPath.name;
            options.path = parsedPath.path;
            const opts = ['state', 'stateInterface'].reduce((current, key) => {
                return schematics_core_1.omit(current, key);
            }, options);
            const templateSource = schematics_1.apply(schematics_1.url(options.testDepth === 'unit' ? './files' : './integration-files'), [
                options.spec
                    ? schematics_1.noop()
                    : schematics_1.filter(path => !path.endsWith('.spec.ts.template')),
                schematics_1.applyTemplates(Object.assign({ 'if-flat': (s) => (options.flat ? '' : s) }, schematics_core_1.stringUtils, options)),
                schematics_1.move(parsedPath.path),
            ]);
            return schematics_1.chain([
                schematics_1.externalSchematic('@schematics/angular', 'component', Object.assign({}, opts, { spec: false })),
                addStateToComponent(options),
                schematics_1.mergeWith(templateSource),
            ])(host, context);
        };
    }
    exports.default = default_1;
});
//# sourceMappingURL=data:application/json;base64,
